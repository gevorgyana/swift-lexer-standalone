namespace swift {
enum class tok {
kw_associatedtype,
kw_class,
kw_deinit,
kw_enum,
kw_extension,
kw_func,
kw_import,
kw_init,
kw_inout,
kw_let,
kw_operator,
kw_precedencegroup,
kw_protocol,
kw_struct,
kw_subscript,
kw_typealias,
kw_var,
kw_fileprivate,
kw_internal,
kw_private,
kw_public,
kw_static,
kw_defer,
kw_if,
kw_guard,
kw_do,
kw_repeat,
kw_else,
kw_for,
kw_in,
kw_while,
kw_return,
kw_break,
kw_continue,
kw_fallthrough,
kw_switch,
kw_case,
kw_default,
kw_where,
kw_catch,
kw_throw,
kw_as,
kw_Any,
kw_false,
kw_is,
kw_nil,
kw_rethrows,
kw_super,
kw_self,
kw_Self,
kw_true,
kw_try,
kw_throws,
kw___FILE__,
kw___LINE__,
kw___COLUMN__,
kw___FUNCTION__,
kw___DSO_HANDLE__,
kw__,
l_paren,
r_paren,
l_brace,
r_brace,
l_square,
r_square,
l_angle,
r_angle,
period,
period_prefix,
comma,
ellipsis,
colon,
semi,
equal,
at_sign,
pound,
amp_prefix,
arrow,
backtick,
backslash,
exclaim_postfix,
question_postfix,
question_infix,
string_quote,
single_quote,
multiline_string_quote,
pound_keyPath,
pound_line,
pound_selector,
pound_file,
pound_fileID,
pound_filePath,
pound_column,
pound_function,
pound_dsohandle,
pound_assert,
pound_sourceLocation,
pound_warning,
pound_error,
pound_if,
pound_else,
pound_elseif,
pound_endif,
pound_available,
pound_fileLiteral,
pound_imageLiteral,
pound_colorLiteral,
integer_literal,
floating_literal,
string_literal,
unknown,
identifier,
oper_binary_unspaced,
oper_binary_spaced,
oper_postfix,
oper_prefix,
dollarident,
contextual_keyword,
raw_string_delimiter,
string_segment,
string_interpolation_anchor,
kw_yield,
kw_undef,
//kw_sil,
//kw_sil_stage,
//kw_sil_property,
//kw_sil_vtable,
//kw_sil_global,
//kw_sil_witness_table,
//kw_sil_default_witness_table,
//kw_sil_differentiability_witness,
//kw_sil_coverage_map,
//kw_sil_scope,
//sil_dollar,
//sil_exclamation,
eof,
code_complete,
//sil_local_name,
comment,
  NUM_TOKENS
};
bool isTokenTextDetermined(tok kind);
StringRef getTokenText(tok kind);
void dumpTokenKind(llvm::raw_ostream &os, tok kind);
}
